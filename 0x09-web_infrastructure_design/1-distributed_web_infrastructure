Whiteboard Design:

User's Device: Represents the user's computer or smartphone.
Internet: A cloud connecting all devices.
Load Balancer (HAproxy): A dedicated server distributing incoming traffic across multiple web servers.
Web Server 1 (Nginx): Runs on Server 2, serving static content and forwarding requests to the application server.
Web Server 2 (Nginx): Runs on Server 3, serving static content and forwarding requests to the application server.
Application Server: Runs on Server 1, handling application logic and database interaction.
Database Cluster (MySQL):
Primary Node: Stores and manages the main copy of the data, handling writes.
Replica Node: Synchronizes data from the primary, used for read operations and failover.
Arrows: Connect components to show data flow.
Explanation:

Additional Elements:

Load Balancer (HAproxy): Distributes incoming traffic across both web servers, improving responsiveness and scalability. It uses a round-robin algorithm, sending requests to each server in a sequential order. This helps ensure fair distribution of workload and prevents overloading any single server.
Database Cluster: Enhances availability and fault tolerance. The primary node handles writes and is the authoritative source of data. The replica node synchronizes data from the primary and can take over if the primary fails, enabling an Active-Passive setup.
Active-Passive vs. Active-Active:

Active-Passive: Only one server (primary) is actively processing requests, while the other (replica) is in standby mode, ready to take over if the primary fails.
Active-Active: Both servers can handle requests simultaneously, offering improved performance and redundancy. However, it requires more complex configuration and can introduce potential data consistency issues.
Database Cluster:

The primary node receives write requests from the application server, updates the database, and replicates the changes to the replica node. The replica node remains synchronized with the primary, ensuring data consistency. If the primary fails, the replica can be promoted to become the new primary, minimizing downtime.

Application and Database Interaction:

The application server primarily interacts with the primary node for write operations.
It can also connect to the replica node for read operations, reducing load on the primary and improving performance.
Potential Issues:

SPOFs:

While the infrastructure offers redundancy compared to the single-server setup, there are still potential SPOFs:
Load balancer: If it fails, no traffic reaches the web servers.
Application server: If it fails, the website becomes unavailable.
Primary database node: If it fails and the replica cannot take over quickly, there could be downtime.
Security Issues:

No firewall: The design lacks a firewall to filter incoming traffic and prevent unauthorized access.
No HTTPS: Communication is not encrypted, making it vulnerable to eavesdropping and data breaches.
Monitoring:

The absence of monitoring tools makes it difficult to proactively identify and troubleshoot issues, potentially leading to downtime and performance degradation.
Addressing Issues:

Implementing a firewall on each server adds a layer of security.
Enabling HTTPS with valid SSL certificates encrypts communication and protects user data.
Setting up monitoring tools for servers, applications, and databases helps identify and address problems before they impact users.
